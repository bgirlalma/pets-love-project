import { createAsyncThunk } from "@reduxjs/toolkit";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  // signOut,
  // updateEmail,
  // updatePassword,
  // updatePhoneNumber,
  updateProfile,
} from "firebase/auth";
import { auth } from "../../firebase/firebase";
// import { ref, set } from "firebase/database";

export const registerUser = createAsyncThunk(
  "pets-userAuth/registerUser",
  async (newuser, thunkApi) => {
    try {
      const defaultAvatar = "/Image/userimg/default-avatar.jpg";

      // —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        newuser.email,
        newuser.password
      );

      const user = userCredential.user;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await updateProfile(user, {
        displayName: newuser.name,
        photoURL: defaultAvatar,
      }).catch((err) => console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err));

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const token = await auth.currentUser.getIdToken();

    return {
      uid: user.uid,
      displayName: user.displayName || newuser.name,
      email: user.email,
      photoURL: user.photoURL || defaultAvatar,
      token,
    };
    } catch (error) {
      return thunkApi.rejectWithValue(error.message);
    }
  }
);

export const loginUser = createAsyncThunk(
  "pets-userAuth/loginUser",
  async (user, thunkApi) => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        user.email,
        user.password
      );

      const { uid, displayName, email } = userCredential.user;
      
      // üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      const userData = { uid, displayName, email, isLogIn: true };
      localStorage.setItem("userAuth", JSON.stringify(userData));

      return userData;
    } catch (error) {
      return thunkApi.rejectWithValue(error.message);
    }
  }
);

export const logoutUser = createAsyncThunk(
  "pets-userAuth/logoutUser",
  async (_, thunkApi) => {
    try {
      await signOut(auth);
      return null;
    } catch (error) {
      return thunkApi.rejectWithValue(error.message);
    }
  }
);

// export const updateUserProfile = createAsyncThunk(
//   "pets-userAuth/updateUserProfile",
//   async (updatedData, thunkApi) => {
//     try {
//       if (!auth.currentUser) {
//         throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
//       }

//       // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
//       const newPhotoURL =
//         updatedData.photoURL || "/Image/userimg/default-avatar.jpg"; // –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä

//       await updateProfile(auth.currentUser, {
//         displayName: updatedData.name,
//         photoURL: newPhotoURL,
//       });

//       // –û–±–Ω–æ–≤–ª—è–µ–º email, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
//       if (updatedData.email) {
//         await updateEmail(auth.currentUser, updatedData.email);
//       }

//       // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
//       if (updatedData.password) {
//         await updatePassword(auth.currentUser, updatedData.password);
//       }

//       // –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
//       if (updatedData.number) {
//         await updatePhoneNumber(auth.currentUser, updatedData.number);
//       }

//       const { uid, displayName, email } = auth.currentUser;
//       const newUserData = {
//         uid,
//         displayName,
//         email,
//         avatar: newPhotoURL,
//       };

//       console.log("Updated user data:", newUserData);

//       // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤–∞—Ç–∞—Ä –≤ Firebase Realtime Database
//       const userRef = ref(database, "user/" + auth.currentUser.uid);
//       await set(userRef, {
//         name: updatedData.name,
//         email: updatedData.email,
//         avatar: newPhotoURL, // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
//       });

//       return newUserData;
//     } catch (error) {
//       return thunkApi.rejectWithValue(error.message);
//     }
//   }
// );
